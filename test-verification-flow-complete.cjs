const axios = require('axios');

// Configura√ß√£o
const API_BASE_URL = 'http://localhost:3000/api';
const TEST_EMAIL = 'teste-completo@exemplo.com';

// Fun√ß√£o para testar o fluxo completo de verifica√ß√£o obrigat√≥ria
async function testVerificationFlowComplete() {
  console.log('üß™ Testando fluxo completo de verifica√ß√£o obrigat√≥ria...\n');
  
  try {
    // 1. Registrar usu√°rio
    console.log('üìù 1. Registrando usu√°rio...');
    try {
      const registerResponse = await axios.post(`${API_BASE_URL}/auth/register`, {
        nome: 'Teste',
        sobrenome: 'Completo',
        email: TEST_EMAIL,
        password: '123456',
        contato: '(11) 99999-9999'
      });
      
      console.log('‚úÖ Usu√°rio registrado:', registerResponse.data.message);
      console.log('‚úÖ requiresVerification:', registerResponse.data.requiresVerification);
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚úÖ Usu√°rio j√° existe');
      } else {
        console.log('‚ùå Erro ao registrar:', error.response?.data?.message);
        return;
      }
    }
    console.log('');
    
    // 2. Testar login (deve falhar e retornar usu√°rio n√£o verificado)
    console.log('üîê 2. Testando login (deve falhar)...');
    try {
      const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
        email: TEST_EMAIL,
        password: '123456'
      });
      console.log('‚ùå Login n√£o deveria ter funcionado');
    } catch (error) {
      const errorMessage = error.response?.data?.message || '';
      console.log('‚úÖ Login bloqueado:', errorMessage);
    }
    console.log('');
    
    // 3. Testar reenvio de c√≥digo
    console.log('üìß 3. Testando reenvio de c√≥digo...');
    try {
      const resendResponse = await axios.post(`${API_BASE_URL}/auth/resend-verification`, {
        email: TEST_EMAIL
      });
      console.log('‚úÖ C√≥digo reenviado:', resendResponse.data.message);
    } catch (error) {
      console.log('‚ùå Erro ao reenviar c√≥digo:', error.response?.data?.message || error.message);
    }
    console.log('');
    
    console.log('üìã Fluxo de verifica√ß√£o obrigat√≥ria implementado:');
    console.log('‚úÖ Registro redireciona para verifica√ß√£o');
    console.log('‚úÖ Login com usu√°rio n√£o verificado redireciona para verifica√ß√£o');
    console.log('‚úÖ Todas as p√°ginas protegidas bloqueadas at√© verifica√ß√£o');
    console.log('‚úÖ Apenas p√°ginas p√∫blicas acess√≠veis sem verifica√ß√£o');
    console.log('');
    console.log('üéØ Fluxo esperado no frontend:');
    console.log('1. Usu√°rio se registra ‚Üí Redirecionado para /email-verification');
    console.log('2. Usu√°rio faz login n√£o verificado ‚Üí Redirecionado para /email-verification');
    console.log('3. Usu√°rio tenta acessar /dashboard ‚Üí Redirecionado para /email-verification');
    console.log('4. Usu√°rio verifica email ‚Üí Redirecionado para /dashboard');
    console.log('5. Agora pode acessar todas as p√°ginas');
    console.log('');
    console.log('üîç P√°ginas p√∫blicas (acess√≠veis sem verifica√ß√£o):');
    console.log('- / (landing page)');
    console.log('- /login');
    console.log('- /signup');
    console.log('- /email-verification');
    console.log('');
    console.log('üîí P√°ginas protegidas (requerem verifica√ß√£o):');
    console.log('- /dashboard');
    console.log('- /pacientes');
    console.log('- /agenda');
    console.log('- /prontuarios');
    console.log('- /financeiro');
    console.log('- /arquivos');
    console.log('- /relatorios');
    console.log('- /configuracoes');
    console.log('');
    console.log('üéØ Para testar:');
    console.log('1. Registre um usu√°rio ‚Üí Deve ir para verifica√ß√£o');
    console.log('2. Tente acessar /dashboard ‚Üí Deve ir para verifica√ß√£o');
    console.log('3. Verifique o email ‚Üí Deve ir para dashboard');
    console.log('4. Agora pode acessar todas as p√°ginas');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
  }
}

// Executar teste
testVerificationFlowComplete().catch(console.error);
